unit Customer.Controller;

interface

uses
  System.SysUtils,
  System.Classes,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  Data.DB,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  MVCFramework.RESTClient,
  MVCFramework.DataSet.Utils;

type
  TdmCustomerController = class(TDataModule)
    fdmCustomer: TFDMemTable;
    fdmCustomerid: TIntegerField;
    fdmCustomercode: TStringField;
    fdmCustomerdescription: TStringField;
    fdmCustomercity: TStringField;
    fdmCustomernote: TStringField;
    fdmCustomerrating: TIntegerField;
  private
    { Private declarations }
  public
    { Public declarations }
    function doGetRESTClient : TRESTClient;
    function doGetAll: String;

    procedure doRefreshData;
  end;

var
  dmCustomerController: TdmCustomerController;

const
  Host = 'localhost';
  Port = 8081;
  EndPoint = '/api/customers';


implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDataModule1 }

function TdmCustomerController.doGetAll: String;
var
  lRESTClient : TRESTClient;
  lRESTResponse : IRESTResponse;
begin
  lRESTClient := doGetRESTClient;
  try
    lRESTResponse := lRESTClient.doGET(EndPoint, []);

    Result := lRESTResponse.BodyAsString;
  finally
    lRESTClient.DisposeOf;
  end;
end;

function TdmCustomerController.doGetRESTClient: TRESTClient;
begin
  Result := TRESTClient.Create(Host, Port);
end;

procedure TdmCustomerController.doRefreshData;
begin
  fdmCustomer.Close;
  fdmCustomer.Open;

  fdmCustomer.LoadFromJSONArray(doGetAll);
end;

end.
